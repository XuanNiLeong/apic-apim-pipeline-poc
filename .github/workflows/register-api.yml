name: Automate deployment and registration of API to APIM and API Center

on:
  push:
      branches:
        - main
  # pull_request:
  #   types: [closed]
  #   branches:
  #     - main

permissions:
  id-token: write
  contents: read

jobs:

  # This job publishes the API to APIM
  publish-api-to-apim:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v2

      # Load environment variables from .env file
      - name: Load .env variables
        run: |
          set -a
          [ -f .env ] && . .env
          set +a
        # uses: direnv/direnv-action@v2
        # with:
        #   env_file: .env

      # Login to Azure with the right permission to write to APIM
      - name: Azure login
        uses: azure/login@v1
        with:
          creds : ${{ secrets.AZURE_CREDENTIALS_APIM }}

      # Publish the API to APIM
      # This will create the API in APIM using the OpenAPI specification
      - name: Deploy API to APIM
        uses: azure/CLI@v2
        with:
          azcliversion: latest
          inlineScript: |

            echo "Deploying API to APIM..."
            az apim api import --resource-group "$RESOURCE_GROUP" \
            --service-name "$APIM_SERVICE_NAME" \
            --path "$API_ID" \
            --api-id "$API_ID" \
            --specification-format OpenApiJson \
            --specification-path "$SPECIFICATION_FILE_PATH" 

  # This job does 3 things. 
  # 1. Retrieves the deployment runtime URL of the API from APIM
  # 2. Registers the API to API Center using the OpenAPI specification
  # 3. Create a deployment for the API in API Center using the retrieved runtime URL
  register-api-to-apic:
    needs: publish-api-to-apim  # This job depends on the previous job.
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v2

      # Load environment variables from .env file
      - name: Load .env variables
        uses: direnv/direnv-action@v2
        with:
          env_file: .env

      # Login to Azure with the right permission to read from APIM
      - name: Azure login
        uses: azure/login@v1
        with:
          creds : ${{ secrets.AZURE_CREDENTIALS_APIM }}

      # Retrieves the API runtime URL from APIM
      - name: Retrieve deployment runtime URL
        uses: azure/CLI@v2
        with:
          azcliversion: latest
          inlineScript: |
            echo "Getting deployment runtime URL from APIM..."
            APIM_URL=$(az apim show --resource-group "$RESOURCE_GROUP" \
                      --name "$APIM_SERVICE_NAME" --query 'gatewayUrl' -o tsv)

            # Get the path configuration for this specific API
            API_PATH=$(az apim api show --resource-group "$RESOURCE_GROUP" \
                      --service-name "$APIM_SERVICE_NAME" \
                      --api-id "$API_ID" --query 'path' -o tsv || echo "$API_ID")

            # Combine them to build the full runtime URL
            RUNTIME_URL="${APIM_URL}/${API_PATH}"
            echo "RUNTIME_URL=$RUNTIME_URL" >> $GITHUB_ENV

      # Login to Azure with the right permission to write to API Center
      - name: Azure login for API Center
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_APIC }}
      
      # Register the API to API Center using the OpenAPI specification
      - name: Register API to API Center
        uses: azure/CLI@v2
        with:
          azcliversion: latest
          inlineScript: |
            echo "Using specification file path: $SPECIFICATION_FILE_PATH"

            # Register the API to API Center using the OpenAPI specification
            echo "Registering API to API Center..."
            az apic api register --resource-group "$RESOURCE_GROUP" \
            --service-name "$APIC_SERVICE_NAME" \
            --api-location "${{ env.SPECIFICATION_FILE_PATH }}"
            echo "Successfully registered API to API Center"

            # Getting the environment ID of the API Center instance 
            echo "Listing environment to retrieve the environment ID..."
            ENVIRONMENT_ID=$(az apic environment list --resource-group "$RESOURCE_GROUP" \
                   --service-name "$APIC_SERVICE_NAME" -o json | \
                   jq -r '.[0].name')            
            echo "Using environment ID: $ENVIRONMENT_ID"

            # Getting the latest API version of the specific API that has been registered to API Center
            echo "Getting version information for API..."
            API_VERSION=$(az apic api version list --resource-group "$RESOURCE_GROUP" \
            --service-name "$APIC_SERVICE_NAME" \
            --api-id "$API_ID" -o json | \
            jq -r 'map(.name | {
              day: .[:2]|tonumber, 
              month: .[3:5]|tonumber, 
              year: .[6:10]|tonumber, 
              original: .
            }) | 
            sort_by(.year * 10000 + .month * 100 + .day) | 
            reverse | .[0].original // empty')

            echo "Latest date-based version: $API_VERSION"

            # Creating a deployment for the API in API Center
            # Using the runtime URL retrieved from APIM
            # Using the environment ID and API version info retrieved above
            echo "Create deployment for the API..."
            az apic api deployment create --resource-group "$RESOURCE_GROUP" \
            --service-name "$APIC_SERVICE_NAME" \
            --deployment-id "$LIFECYCLE_STAGE" \
            --title "${LIFECYCLE_STAGE} deployment" \
            --description "${API_ID} ${LIFECYCLE_STAGE} deployment" \
            --api-id "$API_ID" \
            --environment-id "/workspaces/default/environments/$ENVIRONMENT_ID" \
            --definition-id "/workspaces/default/apis/${API_ID}/versions/${API_VERSION}/definitions/${DEFINITION_ID}" \
            --server "{\"runtimeUri\":[\"${{ env.RUNTIME_URL }}\"]}"          
            echo "Successfully created deployment for the API"



           
